// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: admin_casts_service_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CastsServiceV1Client is the client API for CastsServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CastsServiceV1Client interface {
	GetCast(ctx context.Context, in *GetCastRequest, opts ...grpc.CallOption) (*Cast, error)
	SearchCastByLabel(ctx context.Context, in *SearchCastByLabelRequest, opts ...grpc.CallOption) (*CastsLabels, error)
	GetCasts(ctx context.Context, in *GetCastsRequest, opts ...grpc.CallOption) (*Casts, error)
	CreateCast(ctx context.Context, in *CreateCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLabelForCast(ctx context.Context, in *UpdateLabelForCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddActorsToTheCast(ctx context.Context, in *AddActorsToTheCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveActorsFromTheCast(ctx context.Context, in *RemoveActorsFromTheCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCast(ctx context.Context, in *DeleteCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProfessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Professions, error)
	CreateProfession(ctx context.Context, in *CreateProfessionRequest, opts ...grpc.CallOption) (*CreateProfessionResponse, error)
	UpdateProfession(ctx context.Context, in *UpdateProfessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProfession(ctx context.Context, in *DeleteProfessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type castsServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCastsServiceV1Client(cc grpc.ClientConnInterface) CastsServiceV1Client {
	return &castsServiceV1Client{cc}
}

func (c *castsServiceV1Client) GetCast(ctx context.Context, in *GetCastRequest, opts ...grpc.CallOption) (*Cast, error) {
	out := new(Cast)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/GetCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) SearchCastByLabel(ctx context.Context, in *SearchCastByLabelRequest, opts ...grpc.CallOption) (*CastsLabels, error) {
	out := new(CastsLabels)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/SearchCastByLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) GetCasts(ctx context.Context, in *GetCastsRequest, opts ...grpc.CallOption) (*Casts, error) {
	out := new(Casts)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/GetCasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) CreateCast(ctx context.Context, in *CreateCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/CreateCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) UpdateLabelForCast(ctx context.Context, in *UpdateLabelForCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/UpdateLabelForCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) AddActorsToTheCast(ctx context.Context, in *AddActorsToTheCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/AddActorsToTheCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) RemoveActorsFromTheCast(ctx context.Context, in *RemoveActorsFromTheCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/RemoveActorsFromTheCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) DeleteCast(ctx context.Context, in *DeleteCastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/DeleteCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) GetProfessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Professions, error) {
	out := new(Professions)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/GetProfessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) CreateProfession(ctx context.Context, in *CreateProfessionRequest, opts ...grpc.CallOption) (*CreateProfessionResponse, error) {
	out := new(CreateProfessionResponse)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/CreateProfession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) UpdateProfession(ctx context.Context, in *UpdateProfessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/UpdateProfession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *castsServiceV1Client) DeleteProfession(ctx context.Context, in *DeleteProfessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/admin_casts_service.castsServiceV1/DeleteProfession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CastsServiceV1Server is the server API for CastsServiceV1 service.
// All implementations must embed UnimplementedCastsServiceV1Server
// for forward compatibility
type CastsServiceV1Server interface {
	GetCast(context.Context, *GetCastRequest) (*Cast, error)
	SearchCastByLabel(context.Context, *SearchCastByLabelRequest) (*CastsLabels, error)
	GetCasts(context.Context, *GetCastsRequest) (*Casts, error)
	CreateCast(context.Context, *CreateCastRequest) (*emptypb.Empty, error)
	UpdateLabelForCast(context.Context, *UpdateLabelForCastRequest) (*emptypb.Empty, error)
	AddActorsToTheCast(context.Context, *AddActorsToTheCastRequest) (*emptypb.Empty, error)
	RemoveActorsFromTheCast(context.Context, *RemoveActorsFromTheCastRequest) (*emptypb.Empty, error)
	DeleteCast(context.Context, *DeleteCastRequest) (*emptypb.Empty, error)
	GetProfessions(context.Context, *emptypb.Empty) (*Professions, error)
	CreateProfession(context.Context, *CreateProfessionRequest) (*CreateProfessionResponse, error)
	UpdateProfession(context.Context, *UpdateProfessionRequest) (*emptypb.Empty, error)
	DeleteProfession(context.Context, *DeleteProfessionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCastsServiceV1Server()
}

// UnimplementedCastsServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedCastsServiceV1Server struct {
}

func (UnimplementedCastsServiceV1Server) GetCast(context.Context, *GetCastRequest) (*Cast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCast not implemented")
}
func (UnimplementedCastsServiceV1Server) SearchCastByLabel(context.Context, *SearchCastByLabelRequest) (*CastsLabels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCastByLabel not implemented")
}
func (UnimplementedCastsServiceV1Server) GetCasts(context.Context, *GetCastsRequest) (*Casts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasts not implemented")
}
func (UnimplementedCastsServiceV1Server) CreateCast(context.Context, *CreateCastRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCast not implemented")
}
func (UnimplementedCastsServiceV1Server) UpdateLabelForCast(context.Context, *UpdateLabelForCastRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelForCast not implemented")
}
func (UnimplementedCastsServiceV1Server) AddActorsToTheCast(context.Context, *AddActorsToTheCastRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActorsToTheCast not implemented")
}
func (UnimplementedCastsServiceV1Server) RemoveActorsFromTheCast(context.Context, *RemoveActorsFromTheCastRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveActorsFromTheCast not implemented")
}
func (UnimplementedCastsServiceV1Server) DeleteCast(context.Context, *DeleteCastRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCast not implemented")
}
func (UnimplementedCastsServiceV1Server) GetProfessions(context.Context, *emptypb.Empty) (*Professions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfessions not implemented")
}
func (UnimplementedCastsServiceV1Server) CreateProfession(context.Context, *CreateProfessionRequest) (*CreateProfessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfession not implemented")
}
func (UnimplementedCastsServiceV1Server) UpdateProfession(context.Context, *UpdateProfessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfession not implemented")
}
func (UnimplementedCastsServiceV1Server) DeleteProfession(context.Context, *DeleteProfessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfession not implemented")
}
func (UnimplementedCastsServiceV1Server) mustEmbedUnimplementedCastsServiceV1Server() {}

// UnsafeCastsServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CastsServiceV1Server will
// result in compilation errors.
type UnsafeCastsServiceV1Server interface {
	mustEmbedUnimplementedCastsServiceV1Server()
}

func RegisterCastsServiceV1Server(s grpc.ServiceRegistrar, srv CastsServiceV1Server) {
	s.RegisterService(&CastsServiceV1_ServiceDesc, srv)
}

func _CastsServiceV1_GetCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).GetCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/GetCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).GetCast(ctx, req.(*GetCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_SearchCastByLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCastByLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).SearchCastByLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/SearchCastByLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).SearchCastByLabel(ctx, req.(*SearchCastByLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_GetCasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).GetCasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/GetCasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).GetCasts(ctx, req.(*GetCastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_CreateCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).CreateCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/CreateCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).CreateCast(ctx, req.(*CreateCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_UpdateLabelForCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelForCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).UpdateLabelForCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/UpdateLabelForCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).UpdateLabelForCast(ctx, req.(*UpdateLabelForCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_AddActorsToTheCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActorsToTheCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).AddActorsToTheCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/AddActorsToTheCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).AddActorsToTheCast(ctx, req.(*AddActorsToTheCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_RemoveActorsFromTheCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveActorsFromTheCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).RemoveActorsFromTheCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/RemoveActorsFromTheCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).RemoveActorsFromTheCast(ctx, req.(*RemoveActorsFromTheCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_DeleteCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).DeleteCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/DeleteCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).DeleteCast(ctx, req.(*DeleteCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_GetProfessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).GetProfessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/GetProfessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).GetProfessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_CreateProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).CreateProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/CreateProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).CreateProfession(ctx, req.(*CreateProfessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_UpdateProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).UpdateProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/UpdateProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).UpdateProfession(ctx, req.(*UpdateProfessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CastsServiceV1_DeleteProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CastsServiceV1Server).DeleteProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin_casts_service.castsServiceV1/DeleteProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CastsServiceV1Server).DeleteProfession(ctx, req.(*DeleteProfessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CastsServiceV1_ServiceDesc is the grpc.ServiceDesc for CastsServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CastsServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_casts_service.castsServiceV1",
	HandlerType: (*CastsServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCast",
			Handler:    _CastsServiceV1_GetCast_Handler,
		},
		{
			MethodName: "SearchCastByLabel",
			Handler:    _CastsServiceV1_SearchCastByLabel_Handler,
		},
		{
			MethodName: "GetCasts",
			Handler:    _CastsServiceV1_GetCasts_Handler,
		},
		{
			MethodName: "CreateCast",
			Handler:    _CastsServiceV1_CreateCast_Handler,
		},
		{
			MethodName: "UpdateLabelForCast",
			Handler:    _CastsServiceV1_UpdateLabelForCast_Handler,
		},
		{
			MethodName: "AddActorsToTheCast",
			Handler:    _CastsServiceV1_AddActorsToTheCast_Handler,
		},
		{
			MethodName: "RemoveActorsFromTheCast",
			Handler:    _CastsServiceV1_RemoveActorsFromTheCast_Handler,
		},
		{
			MethodName: "DeleteCast",
			Handler:    _CastsServiceV1_DeleteCast_Handler,
		},
		{
			MethodName: "GetProfessions",
			Handler:    _CastsServiceV1_GetProfessions_Handler,
		},
		{
			MethodName: "CreateProfession",
			Handler:    _CastsServiceV1_CreateProfession_Handler,
		},
		{
			MethodName: "UpdateProfession",
			Handler:    _CastsServiceV1_UpdateProfession_Handler,
		},
		{
			MethodName: "DeleteProfession",
			Handler:    _CastsServiceV1_DeleteProfession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_casts_service_v1.proto",
}
